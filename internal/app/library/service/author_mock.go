// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/library/service/author.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/Chameleon-m/kvd_grpc/internal/app/library/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorRepositoryInterface is a mock of AuthorRepositoryInterface interface.
type MockAuthorRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryInterfaceMockRecorder
}

// MockAuthorRepositoryInterfaceMockRecorder is the mock recorder for MockAuthorRepositoryInterface.
type MockAuthorRepositoryInterfaceMockRecorder struct {
	mock *MockAuthorRepositoryInterface
}

// NewMockAuthorRepositoryInterface creates a new mock instance.
func NewMockAuthorRepositoryInterface(ctrl *gomock.Controller) *MockAuthorRepositoryInterface {
	mock := &MockAuthorRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepositoryInterface) EXPECT() *MockAuthorRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FindAllByBook mocks base method.
func (m *MockAuthorRepositoryInterface) FindAllByBook(ctx context.Context, id uint64) (model.AuthorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByBook", ctx, id)
	ret0, _ := ret[0].(model.AuthorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByBook indicates an expected call of FindAllByBook.
func (mr *MockAuthorRepositoryInterfaceMockRecorder) FindAllByBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByBook", reflect.TypeOf((*MockAuthorRepositoryInterface)(nil).FindAllByBook), ctx, id)
}
