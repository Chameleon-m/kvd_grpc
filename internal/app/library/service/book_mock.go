// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/library/service/book.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/Chameleon-m/kvd_grpc/internal/app/library/model"
	gomock "github.com/golang/mock/gomock"
)

// MockBookRepositoryInterface is a mock of BookRepositoryInterface interface.
type MockBookRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryInterfaceMockRecorder
}

// MockBookRepositoryInterfaceMockRecorder is the mock recorder for MockBookRepositoryInterface.
type MockBookRepositoryInterfaceMockRecorder struct {
	mock *MockBookRepositoryInterface
}

// NewMockBookRepositoryInterface creates a new mock instance.
func NewMockBookRepositoryInterface(ctrl *gomock.Controller) *MockBookRepositoryInterface {
	mock := &MockBookRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepositoryInterface) EXPECT() *MockBookRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FindAllByAuthor mocks base method.
func (m *MockBookRepositoryInterface) FindAllByAuthor(ctx context.Context, id uint64) (model.BookList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByAuthor", ctx, id)
	ret0, _ := ret[0].(model.BookList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByAuthor indicates an expected call of FindAllByAuthor.
func (mr *MockBookRepositoryInterfaceMockRecorder) FindAllByAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByAuthor", reflect.TypeOf((*MockBookRepositoryInterface)(nil).FindAllByAuthor), ctx, id)
}
