// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/library/transport/grpc/handlers/book/book.go

// Package book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	model "github.com/Chameleon-m/kvd_grpc/internal/app/library/model"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// GetListByAuthor mocks base method.
func (m *MockServiceInterface) GetListByAuthor(ctx context.Context, id uint64) (model.BookList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAuthor", ctx, id)
	ret0, _ := ret[0].(model.BookList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAuthor indicates an expected call of GetListByAuthor.
func (mr *MockServiceInterfaceMockRecorder) GetListByAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAuthor", reflect.TypeOf((*MockServiceInterface)(nil).GetListByAuthor), ctx, id)
}
